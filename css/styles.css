/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Aliases for j-column-width().
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-column-gutter().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Alias for j-span().
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Alias for j-shift().
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * Alias for j-unshift().
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 * Aliases for j-edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Alias for j-center().
 */
/**
 * Uncenter an element.
 */
/**
 * Alias for j-uncenter().
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Alias for j-stack().
 */
/**
 * Unstack an element.
 */
/**
 * Alias for j-unstack().
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Alias for j-align().
 */
/**
 * Apply a clearfix to an element.
 */
/**
 * Alias for j-cf().
 */
html, body {
  margin: 0;
  padding: 0;
  border: none;
  font-family: 'Open Sans', sans-serif;
  font-weight: 300; }

h2, h3, h4, h5, h6, p {
  margin: 0;
  padding: 0;
  color: #444444;
  font-family: 'Open Sans', sans-serif; }

a {
  text-decoration: none;
  color: #444444;
  font-weight: 400; }

.emphasis {
  color: #D3D4AA; }

.red {
  color: #901808; }

.white {
  color: #fff; }

.test {
  width: 60px;
  height: 60px; }

.button {
  width: 95vw;
  padding: 5px 10px;
  color: #D3D4AA;
  text-transform: uppercase;
  border: 1px solid #D3D4AA;
  transition: all 0.4s ease-in-out; }
  .button:hover {
    color: #fff;
    background-color: #D3D4AA; }

section.landing {
  margin: 0;
  padding: 0;
  min-height: 325px;
  height: 90vh;
  max-height: 90vh;
  width: 100vw;
  background: url(../img/path.jpg) no-repeat center center fixed;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  text-align: center; }
  section.landing h1 {
    margin: 0;
    padding: 0;
    color: #fff;
    font-family: 'Open Sans', sans-serif;
    font-size: 4.8em;
    letter-spacing: 0.2em;
    position: relative;
    top: 45%; }
  section.landing h3 {
    font-family: 'Raleway', sans-serif;
    text-transform: uppercase;
    letter-spacing: 0.2em;
    color: #E7E9D1;
    position: relative;
    top: 50%; }

div.remainder {
  margin: 0;
  padding: 0;
  min-height: 10vh;
  max-height: 10vh;
  width: 100vw; }
  div.remainder .continue {
    margin-top: 2.5vh;
    display: block;
    margin-left: auto;
    margin-right: auto;
    width: 0;
    height: 0;
    border-left: 20px solid transparent;
    border-right: 20px solid transparent;
    border-top: 40px solid #E7E9D1; }

div.animated-divider {
  margin: 0;
  padding: 0;
  width: 100vw;
  height: auto;
  padding: 0;
  text-align: center; }
@keyframes wave {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }
  div.animated-divider .circle {
    opacity: 1;
    width: 10px;
    height: 10px;
    background: #D3D4AA;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border-radius: 5px; }
  div.animated-divider .container {
    width: 50vw;
    margin: 0 auto;
    line-height: 1.8;
    animation: wave 1s; }
    div.animated-divider .container div {
      display: inline-block;
      margin: 0 20px; }
    div.animated-divider .container .one {
      animation: wave 1s ease 2s;
      margin-left: 0; }
    div.animated-divider .container .two {
      animation: wave 1s ease 2.33s; }
    div.animated-divider .container .three {
      animation: wave 1s ease 2.66s; }

section.nutshell {
  text-align: center;
  color: #444444;
  padding-bottom: 40px;
  line-height: 1.8; }
  section.nutshell h3 {
    font-size: 2.4em; }
  section.nutshell p {
    display: inline-block;
    margin-left: auto;
    margin-right: auto;
    width: 50vw;
    font-size: 1.2em; }
  section.nutshell div {
    margin: 0 auto;
    width: 40%; }

section.platforms {
  margin: 0;
  padding: 40px 0;
  width: 100vw;
  height: auto;
  overflow: auto;
  background-color: #FCFAE6;
  display: table; }
  section.platforms .container {
    margin: 0;
    padding: 0;
    display: table-row;
    width: 50vw;
    text-align: center;
    -ms-text-justify: distribute-all-lines;
    text-justify: distribute-all-lines; }
    section.platforms .container:after {
      content: '';
      width: 100%;
      display: inline-block;
      font-size: 0;
      line-height: 0; }
    section.platforms .container div {
      text-align: center;
      width: 250px;
      padding: 5px 5vw;
      height: auto;
      vertical-align: top;
      display: inline-block; }

section.personality {
  padding: 120px 0;
  width: 100vw;
  height: auto;
  text-align: center;
  background: url(../img/rocks-and-water.jpg) no-repeat center center fixed;
  -webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover; }
  section.personality h2 {
    margin: 0;
    padding: 0;
    color: #fff;
    width: 100%; }
  section.personality span {
    font-family: 'Raleway', sans-serif; }

div.work-prelude {
  width: 100vw;
  padding: 20px 0;
  background-color: #D3D4AA;
  text-align: center;
  font-size: 1.8em; }
  div.work-prelude h4 {
    font-family: 'Raleway', sans-serif;
    letter-spacing: 0.2em; }

section.work {
  width: 100vw;
  text-align: center; }
  section.work h5 {
    font-size: 3rem; }
  section.work .grid {
    *zoom: 1;
    margin: 0;
    padding: 0;
    list-style: none; }
    section.work .grid:before, section.work .grid:after {
      content: '';
      display: table; }
    section.work .grid:after {
      clear: both; }
    section.work .grid li {
      float: left;
      clear: none;
      width: 33.33333%;
      margin-left: 0;
      margin-right: 0; }
      @media only screen and (max-width: 1200px) {
        section.work .grid li {
          float: left;
          clear: none;
          width: 50%;
          margin-left: 0;
          margin-right: 0; } }
      @media only screen and (max-width: 800px) {
        section.work .grid li {
          display: block;
          clear: both;
          float: none;
          width: 100%;
          margin-left: auto;
          margin-right: auto; }
          section.work .grid li:first-child {
            margin-left: auto; }
          section.work .grid li:last-child {
            margin-right: auto; }
          section.work .grid li:nth-of-type(3) ~ li {
            display: none; } }
    section.work .grid img {
      width: 100%; }

div.cta {
  width: 100vw;
  height: auto;
  padding: 48px 0;
  background-color: #444444;
  text-align: center;
  font-size: 2.4em; }
  div.cta h3 {
    font-family: 'Open Sans', sans-serif;
    font-style: italic;
    font-weight: 300;
    color: #FCFAE6; }

section.contact {
  width: 100vw;
  height: auto;
  padding: 40px 0;
  text-align: center; }
  section.contact .container {
    width: 50vw;
    margin: 0 auto;
    line-height: 1.8; }
    section.contact .container h4 {
      font-size: 1.8em; }
    section.contact .container h5 {
      font-size: 1.2em; }
    section.contact .container .divider {
      padding: 20px 0; }
    section.contact .container .divider div {
      display: inline-block; }
    section.contact .container .triangle {
      width: 0;
      height: 0;
      border-left: 5px solid transparent;
      border-right: 5px solid transparent;
      border-bottom: 10px solid #D3D4AA; }

section.closing {
  text-align: center;
  background-color: #444444; }
@keyframes brdr {
  from {
    border: none;
    border-spacing: 0px; }
  to {
    border: 1px solid #FCFAE6;
    border-spacing: 2px; } }
  section.closing .links {
    position: relative;
    bottom: 0;
    padding: 56px 0; }
    section.closing .links .link {
      padding: 0 22px;
      color: #FCFAE6; }
      section.closing .links .link:hover {
        animation: brdr 1s; }
  section.closing h5, section.closing h6 {
    color: #fff;
    font-weight: 300; }
  section.closing h6 {
    padding: 20px 0; }

figure {
  margin: 0;
  position: relative;
  min-width: 320px;
  overflow: hidden;
  background: #3085a3;
  text-align: center;
  /* Anchor will cover the whole item by default */ }
  figure img {
    position: relative;
    display: block;
    height: auto;
    width: 100%;
    opacity: 0.8; }
  figure figcaption {
    color: #000;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden; }
  figure figcaption::before,
  figure figcaption::after {
    pointer-events: none; }
  figure figcaption,
  figure figcaption > a {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }
  figure figcaption > a {
    z-index: 1;
    text-indent: 200%;
    white-space: nowrap;
    font-size: 0;
    opacity: 0; }
  figure h5 {
    word-spacing: -0.15em;
    font-size: 4rem;
    font-weight: 300;
    margin: 0;
    text-transform: uppercase; }
  figure p {
    letter-spacing: 1px;
    margin: 0;
    padding: 0 20px;
    text-align: center;
    box-sizing: border-box;
    width: 100%; }

.effect-sadie figcaption::before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, white 75%);
  content: '';
  opacity: 0;
  transform: translate3d(0, 50%, 0); }
.effect-sadie h5 {
  position: absolute;
  top: 45%;
  left: 0;
  width: 100%;
  opacity: 0;
  transition: transform 0.35s, color 0.35s, opacity 0.35s;
  transform: translate3d(0, -50%, 0); }
.effect-sadie figcaption::before, .effect-sadie p {
  transition: opacity 0.35s, transform 0.35s; }
.effect-sadie p {
  position: absolute;
  bottom: 0;
  left: 0;
  padding-bottom: 3rem;
  opacity: 0;
  transform: translate3d(0, 10px, 0); }
.effect-sadie:hover h5, .effect-sadie.hover h5 {
  opacity: 1;
  transform: translate3d(0, -50%, 0) translate3d(0, -10px, 0); }
.effect-sadie:hover figcaption::before, .effect-sadie:hover p, .effect-sadie.hover figcaption::before, .effect-sadie.hover p {
  opacity: 1;
  transform: translate3d(0, 0, 0); }

/* For the landing */
@media only screen and (max-width: 835px) {
  section.landing h1 {
    top: 30%; } }
/* Small Devices, Tablets */
@media only screen and (max-width: 768px) {
  section.nutshell p {
    width: 95vw; }

  div.cta {
    font-size: 1.8em; } }
/* Extra Small Devices, Phones */
@media only screen and (max-width: 480px) {
  section.landing h1 {
    font-size: 3.6em; } }
/* Custom, iPhone Retina */
@media only screen and (max-width: 320px) {
  section.landing h1 {
    font-size: 2.4em; } }
/* iPhone6 */
@media only screen and (min-device-width: 375px) and (max-device-width: 667px) {
  section.landing {
    background: url(../img/path_iphone.jpeg) no-repeat center center fixed; }

  section.personality {
    background: url(../img/rocks-and-water.jpg) no-repeat center center fixed; } }

/*# sourceMappingURL=styles.css.map */
